
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can only read/write their own profile.
    // They cannot change protected fields like their role or plan directly.
    // Admins can update supporter status, but that logic would be handled via secure backend functions.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
    }
    
    // Notifications and chat history are subcollections of a user,
    // so they inherit the parent rule: only the owner can access them.
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
    }

    // Invites can be created by any signed-in user.
    // They can be read if you are the sender (founder) or receiver (caEmail).
    // They can be updated (e.g., to 'accepted') by the invited CA.
    // They can be deleted by the founder who sent them.
    match /invites/{inviteId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn() && (resource.data.founderId == request.auth.uid || resource.data.caEmail == request.auth.token.email);
        allow update: if isSignedIn() && resource.data.caEmail == request.auth.token.email;
        allow delete: if isSignedIn() && resource.data.founderId == request.auth.uid;
    }

    // Any signed-in user can submit feedback. No one can read/update/delete it from the client.
    match /feedback/{feedbackId} {
      allow create: if isSignedIn();
      allow read, update, delete: if false;
    }
    
    // Counters, Access Passes, and Transactions should only be handled by a secure backend/admin environment.
    // No client-side access is permitted.
    match /counters/{counterId} {
      allow read, write: if false;
    }

    match /accessPasses/{passId} {
      allow read, write: if false;
    }

    match /transactions/{transactionId} {
      allow read, write: if false;
    }
  }
}
