
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, update: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
    }
    
    // Users can create and read their own subcollections
    match /users/{userId}/{collection}/{docId} {
        allow read, write, create: if isSignedIn() && isOwner(userId);
    }
    
    // The user counter is only writeable by authenticated users during signup.
    // In production, this should be handled by a server-side function (Cloud Function)
    // to prevent abuse. For now, we allow any signed-in user to increment it.
    match /counters/userCounter {
      allow read: if true;a
      allow write: if isSignedIn();
    }
    
    // Transactions can be created by any signed-in user.
    // Reading/updating should only be for admins (not implemented here, requires custom claims).
    match /transactions/{transactionId} {
      allow create: if isSignedIn();
      // In production, restrict read/write to admins with custom claims
      allow read, update: if false; 
    }

    // Feedback can be created by any signed-in user.
    match /feedback/{feedbackId} {
        allow create: if isSignedIn();
        // Admins only for read/update
        allow read, update, delete: if false;
    }
    
    // Invites can be read by anyone (to check for invites).
    // They can be created by signed-in users.
    // They can be updated (accepted) by the invited user (the CA).
    match /invites/{inviteId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.caEmail == request.auth.token.email;
      // Deleting invites should be restricted, perhaps only by the sender or an admin
      allow delete: if false;
    }
  }
}
