'use client';

import { useCallback, useState, useTransition, useEffect } from 'react';
import { useFormState, useFormStatus } from 'react-dom';
import { useDropzone, type FileRejection } from 'react-dropzone';
import { generateContractAnalysis } from './actions';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/auth';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Sparkles, UploadCloud, FileWarning, BadgeHelp, ClipboardCheck } from 'lucide-react';
import { cn } from '@/lib/utils';
import type { ContractAnalysisOutput } from '@/lib/types';
import { Badge } from '@/components/ui/badge';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const initialState: { data: ContractAnalysisOutput | null; error: string | null; timestamp: string | null } = {
  data: null,
  error: null,
  timestamp: null,
};

function SubmitButton() {
  const { pending } = useFormStatus();
  return (
    <Button type="submit" disabled={pending} className="w-full sm:w-auto">
      {pending ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Analyzing...
        </>
      ) : (
        <>
          <Sparkles className="mr-2 h-4 w-4" /> Run Analysis (5 Credits)
        </>
      )}
    </Button>
  );
}

function AnalysisResults({ analysis }: { analysis: ContractAnalysisOutput }) {
    const severityMap: { [key in 'High' | 'Medium' | 'Low']: string } = {
        High: 'bg-red-100 text-red-800 border-red-200 dark:bg-red-900/50 dark:text-red-300 dark:border-red-500/30',
        Medium: 'bg-amber-100 text-amber-800 border-amber-200 dark:bg-amber-900/50 dark:text-amber-300 dark:border-amber-500/30',
        Low: 'bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/50 dark:text-blue-300 dark:border-blue-500/30',
    };
    
  return (
    <Card className="animate-in fade-in-50 duration-500">
        <CardHeader>
            <CardTitle>Contract Analysis Report</CardTitle>
            <CardDescription>Generated by LexIQ AI. Always consult with a qualified legal professional.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
            <div className="p-4 rounded-lg bg-muted">
                <h3 className="font-semibold text-lg mb-2">Executive Summary</h3>
                <p className="text-sm text-muted-foreground">{analysis.summary}</p>
            </div>
            
            <Accordion type="multiple" defaultValue={['risks', 'key-terms']} className="w-full">
                <AccordionItem value="risks">
                    <AccordionTrigger className="text-lg font-semibold"><div className="flex items-center gap-2"><FileWarning/> Identified Risks ({analysis.risks.length})</div></AccordionTrigger>
                    <AccordionContent className="pt-4 space-y-4">
                        {analysis.risks.length > 0 ? analysis.risks.map((item, index) => (
                            <div key={index} className="p-4 border rounded-lg">
                                <div className="flex items-center justify-between mb-2">
                                    <h4 className="font-semibold text-base">{item.risk}</h4>
                                    <Badge variant="outline" className={cn("capitalize", severityMap[item.severity])}>{item.severity}</Badge>
                                </div>
                                <p className="text-sm text-muted-foreground pl-6 border-l-2 ml-2">{item.recommendation}</p>
                            </div>
                        )) : <p className="text-muted-foreground text-sm p-4">No major risks identified.</p>}
                    </AccordionContent>
                </AccordionItem>
                <AccordionItem value="key-terms">
                    <AccordionTrigger className="text-lg font-semibold"><div className="flex items-center gap-2"><ClipboardCheck/> Key Terms ({analysis.keyTerms.length})</div></AccordionTrigger>
                    <AccordionContent className="pt-4 space-y-4">
                         {analysis.keyTerms.map((item, index) => (
                            <div key={index} className="p-4 border-l-2 rounded-r-lg bg-muted/50">
                                <h4 className="font-semibold">{item.term}</h4>
                                <p className="text-sm text-muted-foreground mt-1">{item.explanation}</p>
                            </div>
                        ))}
                    </AccordionContent>
                </AccordionItem>
                 <AccordionItem value="missing-clauses">
                    <AccordionTrigger className="text-lg font-semibold"><div className="flex items-center gap-2"><BadgeHelp /> Missing Clauses ({analysis.missingClauses.length})</div></AccordionTrigger>
                    <AccordionContent className="pt-4">
                        <ul className="list-disc list-inside space-y-2 text-muted-foreground">
                         {analysis.missingClauses.length > 0 ? analysis.missingClauses.map((item, index) => (
                            <li key={index} className="text-sm">{item}</li>
                        )) : <p className="text-muted-foreground text-sm p-4">No standard missing clauses were identified.</p>}
                        </ul>
                    </AccordionContent>
                </AccordionItem>
            </Accordion>
        </CardContent>
    </Card>
  );
}

export default function ContractAnalyzerForm() {
  const [state, formAction] = useFormState(generateContractAnalysis, initialState);
  const [contractText, setContractText] = useState('');
  const { toast } = useToast();
  const { deductCredits, userProfile } = useAuth();
  
  const onDrop = useCallback((acceptedFiles: File[], fileRejections: FileRejection[]) => {
      if (fileRejections.length > 0) {
        toast({
          variant: "destructive",
          title: "File Upload Error",
          description: fileRejections[0].errors[0].message,
        })
        return
      }
      const file = acceptedFiles[0];
      if(file) {
          const reader = new FileReader();
          reader.onload = (event) => {
              const text = event.target?.result as string;
              setContractText(text);
              toast({ title: "File Loaded", description: `${file.name} has been loaded into the text area.` });
          };
          reader.readAsText(file);
      }
    }, [toast]);
    
  const { getRootProps, getInputProps, isDragActive, open: openFileDialog } = useDropzone({
    onDrop,
    accept: { 
        'text/plain': ['.txt'],
        'application/msword': ['.doc'],
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
    },
    maxFiles: 1,
    noClick: true,
    noKeyboard: true,
  });

  const { pending } = useFormStatus();
  
  const handleSubmit = (formData: FormData) => {
    if ((userProfile?.credits ?? 0) < 5) {
      toast({ variant: 'destructive', title: 'Insufficient Credits', description: 'You need at least 5 credits to run an analysis.' });
      return;
    }
    deductCredits(5);
    formAction(formData);
  };

  useEffect(() => {
    if(state.error) {
        toast({ variant: 'destructive', title: 'Analysis Failed', description: state.error });
    }
  }, [state.error, toast]);


  return (
    <div className="space-y-6">
        <form action={handleSubmit}>
            <Card>
                <CardHeader>
                    <CardTitle>Submit Contract</CardTitle>
                    <CardDescription>Upload a document or paste the text directly below to begin.</CardDescription>
                </CardHeader>
                <CardContent>
                     <div {...getRootProps()} className={cn("p-6 border-2 border-dashed rounded-lg text-center bg-muted/40 cursor-pointer relative", isDragActive && "border-primary bg-primary/10")}>
                        <input {...getInputProps()} name="file-upload" />
                        <div className="flex flex-col items-center justify-center gap-2">
                             <UploadCloud className="mx-auto h-12 w-12 text-primary/20" />
                             <p className="mt-2 font-semibold">
                                Drag & drop contract file here
                             </p>
                             <p className="text-sm text-muted-foreground">or <Button type="button" variant="link" className="p-0 h-auto" onClick={openFileDialog}>browse files</Button></p>
                             <p className="text-xs text-muted-foreground">Supported: .txt, .doc, .docx</p>
                        </div>
                     </div>
                     <div className="relative my-4">
                        <div className="absolute inset-0 flex items-center">
                            <span className="w-full border-t" />
                        </div>
                        <div className="relative flex justify-center text-xs uppercase">
                            <span className="bg-card px-2 text-muted-foreground">Or</span>
                        </div>
                    </div>
                    <Textarea
                        name="contractText"
                        value={contractText}
                        onChange={(e) => setContractText(e.target.value)}
                        placeholder="Paste your contract text here..."
                        className="min-h-[250px] text-sm"
                    />
                </CardContent>
                <CardContent className="flex justify-end pt-6">
                    <SubmitButton />
                </CardContent>
            </Card>
        </form>

        {pending && !state.data && (
            <div className="text-center text-muted-foreground p-8 flex flex-col items-center justify-center gap-4 flex-1 h-96 border rounded-lg border-dashed">
                <Loader2 className="h-12 w-12 text-primary animate-spin" />
                <p className="font-semibold text-lg text-foreground">AI is analyzing your contract...</p>
                <p className="max-w-md">This can take up to a minute for large documents. Please don't navigate away.</p>
            </div>
        )}
        
        {state.data && <AnalysisResults analysis={state.data} />}

    </div>
  );
}
