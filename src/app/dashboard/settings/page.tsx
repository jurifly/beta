

'use client';

import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/auth";
import SettingsForm from './form';
import BillingForm from "./billing-form";
import NotificationsForm from "./notifications-form";
import FeedbackForm from "./feedback-form";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { User, CreditCard, Bell, Lock, KeyRound, Loader2, MessageCircle, BookLock, ChevronRight, ArrowLeft, LifeBuoy } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { AddCompanyModal } from "@/components/dashboard/add-company-modal";
import type { Company } from "@/lib/types";
import { ScrollArea } from "@/components/ui/scroll-area";
import Link from "next/link";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import { Bug, Lightbulb, Palette, Send, ThumbsDown, ThumbsUp } from "lucide-react";
import { useSearchParams } from "next/navigation";
import { auth } from "@/lib/firebase/config";
import { useIsMobile } from "@/hooks/use-mobile";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

// --- Policies Tab Content ---
const policies = {
    "terms": { title: "Terms & Conditions", lastUpdated: "October 26, 2023", content: `<p>Welcome to JuriFly. By accessing or using our platform, you agree to the following:</p><h3 class="font-semibold mt-4 mb-2">No Direct Filing</h3><p>JuriFly is an information and productivity tool. We do not file taxes, returns, or legal documents on your behalf.</p><h3 class="font-semibold mt-4 mb-2">Data Privacy</h3><p>We never sell your data. Period. Your information is encrypted and stored securely.</p><h3 class="font-semibold mt-4 mb-2">Workspace Collaboration</h3><p>Shared workspaces allow clients and advisors to communicate, annotate, and upload files in one place. You are responsible for who you invite and share access with.</p><h3 class="font-semibold mt-4 mb-2">No Legal Advice</h3><p>We provide insights, visualizations, and tools—not legal or financial advice. For any decisions, please consult a certified professional.</p><h3 class="font-semibold mt-4 mb-2">Fair Use</h3><p>Don’t abuse the system (e.g. spam, botting, attempting to hack) or your account may be suspended.</p><p class="mt-4">By continuing to use JuriFly, you accept these terms.</p>` },
    "privacy": { title: "Privacy Policy", lastUpdated: "October 26, 2023", content: `<p>We respect your privacy and are committed to safeguarding your data.</p><h3 class="font-semibold mt-4 mb-2">Data Ownership</h3><p>You own your data. We never share or sell your files, contacts, or workspace content.</p><h3 class="font-semibold mt-4 mb-2">Cookies</h3><p>We use minimal cookies only to improve your experience.</p><h3 class="font-semibold mt-4 mb-2">Third-party APIs</h3><p>Where we use external APIs (e.g. to fetch MCA data or financial summaries), your data is not stored or shared with third-party platforms.</p><h3 class="font-semibold mt-4 mb-2">AI & Automation</h3><p>AI is used to help you understand—not replace—financial or legal advice. All summaries and alerts are generated contextually and can be reviewed or turned off.</p><p class="mt-4">We are fully GDPR-compliant and committed to Indian data sovereignty.</p>` },
    "disclaimer": { title: "AI Disclaimer", lastUpdated: "October 26, 2023", content: `<p>The features and information generated by Artificial Intelligence (AI) on the Jurifly platform are provided for informational purposes only.</p><h3 class="font-semibold mt-4 mb-2">1. Not Professional Advice</h3><p>The content generated by our AI is not a substitute for professional legal, financial, or tax advice. Always seek the advice of a qualified professional with any questions you may have regarding a legal or financial matter.</p><h3 class="font-semibold mt-4 mb-2">2. No Guarantees</h3><p>While we strive to provide accurate and up-to-date information, we make no representation or warranties of any kind, express or implied, about the completeness, accuracy, reliability, suitability or availability with respect to the AI-generated content. Any reliance you place on such information is therefore strictly at your own risk.</p><h3 class="font-semibold mt-4 mb-2">3. Limitation of Liability</h3><p>Jurifly disclaims all liability for any errors or omissions in the content provided by the AI and for any actions taken in reliance on that content.</p>` }
};
const PoliciesTab = () => (
  <Card className="interactive-lift">
    <CardHeader><CardTitle>Legal & Policies</CardTitle><CardDescription>Our terms, privacy policy, and other legal documents.</CardDescription></CardHeader>
    <CardContent>
      <Accordion type="single" collapsible className="w-full">
        {Object.entries(policies).map(([key, policy]) => (
          <AccordionItem value={key} key={key}><AccordionTrigger className="text-left hover:no-underline">{policy.title}</AccordionTrigger><AccordionContent className="prose dark:prose-invert max-w-none border-t pt-4"><p className="text-sm text-muted-foreground">Last updated: {policy.lastUpdated}</p><div dangerouslySetInnerHTML={{ __html: policy.content }} /></AccordionContent></AccordionItem>
        ))}
      </Accordion>
    </CardContent>
  </Card>
);

// --- Security Tab ---
const SecurityTab = () => {
    const { user, sendPasswordResetLink } = useAuth();
    const { toast } = useToast();
    const [isSending, setIsSending] = useState(false);

    const handlePasswordReset = async () => {
        if (!user?.email) {
            toast({ variant: 'destructive', title: 'Error', description: 'No email address found for your account.' });
            return;
        }
        setIsSending(true);
        try {
            await sendPasswordResetLink(user.email);
            toast({ title: 'Password Reset Email Sent', description: 'Please check your inbox for instructions to reset your password.' });
        } catch (error: any) {
            toast({ variant: 'destructive', title: 'Error', description: error.message });
        } finally {
            setIsSending(false);
        }
    };
    
    const isEmailProvider = auth.currentUser?.providerData.some(p => p.providerId === 'password');

    return (
        <Card className="interactive-lift">
            <CardHeader><CardTitle>Security</CardTitle><CardDescription>Manage your workspace security settings.</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              <Card>
                  <CardHeader><CardTitle className="text-base">Change Password</CardTitle></CardHeader>
                  <CardContent>
                    {isEmailProvider ? (
                      <p className="text-sm text-muted-foreground mb-4">Click the button below to send a password reset link to your email address.</p>
                    ) : (
                      <p className="text-sm text-muted-foreground">You signed in with a social provider (e.g., Google). You can change your password through them.</p>
                    )}
                  </CardContent>
                  {isEmailProvider && (
                    <CardFooter>
                      <Button onClick={handlePasswordReset} disabled={isSending}>
                          {isSending && <Loader2 className="mr-2 h-4 w-4 animate-spin"/>}
                          Send Reset Link
                      </Button>
                    </CardFooter>
                  )}
              </Card>
              <Card><CardHeader><CardTitle className="text-base flex items-center justify-between">Single Sign-On (SSO)<Lock className="w-4 h-4 text-muted-foreground"/></CardTitle><CardDescription>Allow your team to sign in with your corporate identity provider.</CardDescription></CardHeader><CardFooter className="border-t pt-4"><p className="text-sm text-muted-foreground">SSO is an Enterprise feature. Please contact sales to enable.</p></CardFooter></Card>
            </CardContent>
        </Card>
    );
};

const settingsItems = [
    { key: 'profile', title: 'Profile', description: 'Manage personal and company information', icon: User, component: SettingsForm },
    { key: 'subscription', title: 'Subscription', description: 'Manage your plan and billing details', icon: CreditCard, component: BillingForm },
    { key: 'notifications', title: 'Notifications', description: 'Choose how you get notified', icon: Bell, component: NotificationsForm },
    { key: 'security', title: 'Security', description: 'Change password and manage access', icon: Lock, component: SecurityTab },
    { key: 'policies', title: 'Legal & Policies', description: 'Our terms, privacy, and disclaimers', icon: BookLock, component: PoliciesTab },
    { key: 'feedback', title: 'Feedback', description: 'Help us improve the product', icon: MessageCircle, component: FeedbackForm },
    { key: 'help', title: 'Help & FAQ', description: 'Find answers to common questions', icon: LifeBuoy, component: null, href: '/dashboard/help' },
];

export default function SettingsPage() {
  const isMobile = useIsMobile();
  const searchParams = useSearchParams();
  const tabParam = searchParams.get('tab');
  
  const [activeView, setActiveView] = useState<string | null>(null);
  const [isMounted, setIsMounted] = useState(false);

  const [isModalOpen, setModalOpen] = useState(false);
  const [companyToEdit, setCompanyToEdit] = useState<Company | null>(null);
  const { userProfile, deductCredits } = useAuth();
  
  useEffect(() => {
    setIsMounted(true);
    // Set initial active view based on query param or device type
    setActiveView(tabParam || (isMobile ? null : 'profile'));
  }, [tabParam, isMobile]);

  useEffect(() => {
    if (isMounted) {
      setActiveView(tabParam || (isMobile ? null : 'profile'));
    }
  }, [isMounted, isMobile, tabParam]);

  if (!userProfile) {
    return <div className="flex h-full w-full items-center justify-center"><Loader2 className="h-8 w-8 animate-spin text-primary" /></div>;
  }

  const handleAddCompanyClick = () => {
      setCompanyToEdit(null);
      setModalOpen(true);
  };

  const handleEditCompanyClick = (company: Company) => {
    setCompanyToEdit(company);
    setModalOpen(true);
  };
  
  const onModalOpenChange = (open: boolean) => {
    setModalOpen(open);
    if (!open) {
      setCompanyToEdit(null);
    }
  };

  const getInitials = (name: string) => {
    const names = name.split(' ');
    const initials = names.map(n => n[0]).join('');
    return initials.slice(0, 2).toUpperCase();
  }

  const activeComponent = settingsItems.find(item => item.key === activeView);

  // Hydration safety: Don't render UI that depends on `isMobile` on the server
  if (!isMounted) {
    return (
      <div className="flex h-full w-full items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (isMobile) {
    if (activeComponent && activeComponent.component) {
      const Component = activeComponent.component as any;
      return (
        <div className="space-y-4">
          <Button variant="ghost" onClick={() => setActiveView(null)} className="flex items-center gap-2 text-muted-foreground">
            <ArrowLeft className="w-4 h-4" />
            Back to Settings
          </Button>
          <Component 
            onAddCompanyClick={handleAddCompanyClick}
            onEditCompanyClick={handleEditCompanyClick}
          />
        </div>
      );
    }
    
    return (
      <>
        <AddCompanyModal isOpen={isModalOpen} onOpenChange={onModalOpenChange} companyToEdit={companyToEdit} deductCredits={deductCredits} />
        <div className="space-y-4">
          <div className="flex items-center gap-4 p-4">
              <Avatar className="h-16 w-16 border-2 border-primary/20">
                  <AvatarFallback className="text-2xl">{getInitials(userProfile.name)}</AvatarFallback>
              </Avatar>
              <div>
                  <h1 className="text-xl font-bold">{userProfile.name}</h1>
                  <p className="text-sm text-muted-foreground">{userProfile.email}</p>
              </div>
          </div>
          <div className="space-y-2">
            {settingsItems.map(item => {
              const content = (
                  <div className="w-full flex items-center gap-4 p-4 text-left rounded-lg hover:bg-muted">
                      <item.icon className="w-6 h-6 text-muted-foreground"/>
                      <div className="flex-1">
                        <p className="font-medium">{item.title}</p>
                        <p className="text-sm text-muted-foreground">{item.description}</p>
                      </div>
                      <ChevronRight className="w-5 h-5 text-muted-foreground"/>
                  </div>
              );

              if (item.href) {
                  return <Link href={item.href} key={item.key} className="block hover:bg-muted rounded-lg">{content}</Link>
              }

              return (
                  <button key={item.key} onClick={() => setActiveView(item.key)} className="w-full text-left hover:bg-muted rounded-lg">
                      {content}
                  </button>
              );
            })}
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <AddCompanyModal 
        isOpen={isModalOpen} 
        onOpenChange={onModalOpenChange}
        companyToEdit={companyToEdit}
        deductCredits={deductCredits}
      />
      <div className="space-y-6">
        <div className="p-6 rounded-lg bg-[var(--feature-color,hsl(var(--primary)))]/10 border border-[var(--feature-color,hsl(var(--primary)))]/20">
            <h2 className="text-2xl font-bold tracking-tight text-[var(--feature-color,hsl(var(--primary)))]">Settings</h2>
            <p className="text-muted-foreground">Manage your personal, billing, and company information.</p>
        </div>
        <Tabs value={activeView || 'profile'} onValueChange={setActiveView} className="space-y-6">
          <ScrollArea className="w-full sm:w-auto -mx-4 px-4 sm:mx-0 sm:px-0" orientation="horizontal">
              <TabsList className="inline-flex h-auto sm:h-10 items-center justify-start w-max">
                {settingsItems.map(item => (
                    <TabsTrigger value={item.key} key={item.key} asChild={!!item.href}>
                        {item.href ? (
                            <Link href={item.href} className="flex items-center gap-2">
                                <item.icon className="w-4 h-4"/>{item.title}
                            </Link>
                        ) : (
                            <span className="flex items-center gap-2">
                                <item.icon className="w-4 h-4"/>{item.title}
                            </span>
                        )}
                    </TabsTrigger>
                ))}
              </TabsList>
          </ScrollArea>
          <TabsContent value="profile" className="space-y-6">
            <SettingsForm 
              onAddCompanyClick={handleAddCompanyClick}
              onEditCompanyClick={handleEditCompanyClick}
            />
          </TabsContent>
          <TabsContent value="subscription"><BillingForm /></TabsContent>
          <TabsContent value="notifications"><NotificationsForm /></TabsContent>
          <TabsContent value="security"><SecurityTab /></TabsContent>
          <TabsContent value="policies"><PoliciesTab /></TabsContent>
          <TabsContent value="feedback"><FeedbackForm /></TabsContent>
        </Tabs>
      </div>
    </>
  );
}
