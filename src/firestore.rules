
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Secure user profiles: users can only read/write their own profile
    match /users/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      // Ensure users can only create their own profile document
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // Secure subcollections (chat history, notifications, etc.)
    match /users/{userId}/{collection}/{docId} {
       allow read, write, delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Secure transaction records
    match /transactions/{transactionId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Secure counters: only allow increments by authenticated users.
    // This is a simplified rule; a more robust solution might use a Cloud Function.
    match /counters/userCounter {
      allow read, write: if isAuthenticated();
    }
    
    // Secure invites: allow creation, reading by recipient, and deletion by parties involved.
    match /invites/{inviteId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && resource.data.caEmail == request.auth.token.email;
      allow delete: if isAuthenticated() && (isOwner(resource.data.founderId) || resource.data.caEmail == request.auth.token.email);
      // Update for accepting the invite (done in a transaction)
      allow update: if isAuthenticated() && resource.data.caEmail == request.auth.token.email;
    }
  }
}
